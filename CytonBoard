import sys
import time
import threading
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from brainflow.board_shim import BoardShim, BrainFlowInputParams, LogLevels

# Initialize BrainFlow logging
BoardShim.enable_dev_board_logger()

# Setup parameters for Cyton Board
params = BrainFlowInputParams()
params.serial_port = 'COM3'  # Change as needed for your system

# Board ID for Cyton
board_id = BoardShim.get_board_id('CYTON_BOARD')
board = BoardShim(board_id, params)

# Initialize board
board.prepare_session()
board.start_stream(45000, 'file://record_data.csv:w')  # Save data to CSV with timestamps

# Get sampling rate and channel info
sampling_rate = BoardShim.get_sampling_rate(board_id)
eeg_channels = BoardShim.get_eeg_channels(board_id)

# Data buffer to hold streaming data
data_buffer = []
window_size = 5  # seconds
buffer_length = window_size * sampling_rate

# Setup matplotlib for real-time plotting
fig, ax = plt.subplots()
lines = [ax.plot([], [])[0] for _ in eeg_channels]
ax.set_xlim(0, window_size)
ax.set_ylim(-100, 100)  # Adjust based on expected signal range
ax.set_title('Real-Time EEG Data')
ax.set_xlabel('Time (s)')
ax.set_ylabel('Microvolts (ÂµV)')

# Function to update the plot
def update_plot(frame):
    global data_buffer
    data = board.get_current_board_data(buffer_length)
    timestamps = data[-1] - data[-1][0]  # Relative timestamps
    for i, channel in enumerate(eeg_channels):
        lines[i].set_data(timestamps, data[channel])
    return lines

# Threshold function to identify states (e.g., alpha relaxation, beta concentration)
def identify_brain_state(signal, alpha_threshold=30, beta_threshold=20):
    fft_vals = np.abs(np.fft.rfft(signal))
    freqs = np.fft.rfftfreq(len(signal), 1.0 / sampling_rate)
    alpha_band = np.logical_and(freqs >= 8, freqs <= 13)
    beta_band = np.logical_and(freqs >= 13, freqs <= 30)

    alpha_power = np.mean(fft_vals[alpha_band])
    beta_power = np.mean(fft_vals[beta_band])

    if alpha_power > alpha_threshold:
        return 'Relaxed (Alpha)'
    elif beta_power > beta_threshold:
        return 'Focused (Beta)'
    else:
        return 'Neutral'

# Start real-time plot animation
ani = FuncAnimation(fig, update_plot, interval=1000)
plt.show()

# Stop the board after closing the plot
board.stop_stream()
board.release_session()
